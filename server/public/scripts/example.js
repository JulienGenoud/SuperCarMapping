/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.degree}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>SuperCarMapping</h1>
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
        <OrderForm onOrderSubmit={this.handleCommentSubmit} />
        <CommentList data={this.state.data} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <div key={comment.id}>
          <h4 style={{"margin" : "25px 0 0 0"}}>{new Date(comment.id).toString()}</h4>
          <div><b>distance</b>  {comment.degree}</div>
          <div><b>degree</b>  {comment.distance}</div>
          <div><b>commandROT</b>  {comment.order.rotation}</div>
          <div><b>commandDIR</b>  {comment.order.direction}</div>
          <div><b>commandTIME</b>  {comment.order.time}</div>
        </div>
      );
    }).reverse();
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {degree: '', distance: ''};
  },
  handleRotationChange: function(e) {
    this.setState({rotation: e.target.value});
  },
  handleDirectionChange: function(e) {
    this.setState({direction: e.target.value});
  },
  handleTimeChange: function(e) {
    this.setState({time: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var rotation = this.state.rotation.trim();
    var direction = this.state.direction.trim();
    var time = this.state.time.trim();

    if (!rotation || !direction || !time) {
      return;
    }
    this.props.onCommentSubmit({order:{rotation: rotation, direction: direction, time: time}});
    this.setState({rotation: '', direction: '', time: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="rotation"
          value={this.state.rotation}
          onChange={this.handleRotationChange}
        />
        <input
          type="text"
          placeholder="direction"
          value={this.state.direction}
          onChange={this.handleDirectionChange}
        />
        <input
          type="text"
          placeholder="time"
          value={this.state.time}
          onChange={this.handleTimeChange}
        />
        <input type="submit" value="Fake Car Command" />
      </form>
    );
  }
});


var OrderForm = React.createClass({
  getInitialState: function() {
    return {degree: '', distance: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({degree: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({distance: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var degree = this.state.degree.trim();
    var distance = this.state.distance.trim();
    if (!distance || !degree) {
      return;
    }
    this.props.onOrderSubmit({degree: degree, distance: distance});
    this.setState({degree: '', distance: ''});
  },
  render: function() {
    return (
      <form className="orderForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="degree"
          value={this.state.degree}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="distance"
          value={this.state.distance}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Fake Car Value" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/commands" pollInterval={2000} />,
  document.getElementById('content')
);
